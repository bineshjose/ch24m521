services:
  db:
    image: postgres:14
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [mlops]

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "8801:9000"   # S3 API
      - "8800:9001"   # Console
    volumes:
      - minio:/data
    networks: [mlops]

  minio-init:
    image: minio/mc:latest
    depends_on: [minio]
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb -p local/${MINIO_BUCKET} || true &&
      mc policy set public local/${MINIO_BUCKET} || true &&
      sleep 2
      "
    networks: [mlops]

  mlflow:
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    depends_on: [db, minio, minio-init]
    restart: unless-stopped
    environment:
      # DB and artifacts
      MLFLOW_BACKEND_URI: ${MLFLOW_BACKEND_URI}
      MLFLOW_ARTIFACT_URI: ${MLFLOW_ARTIFACT_URI}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      # S3 credentials
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minio}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minio123}
      AWS_DEFAULT_REGION: us-east-1
      # DB host/port for wait script
      MLFLOW_DB_HOST: db
      MLFLOW_DB_PORT: "5432"
      # Also pass postgres creds for the wait script (defaults match .env)
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5500:5000"
    networks: [mlops]

  jupyter-spark:
    image: jupyter/pyspark-notebook:spark-3.4.1
    depends_on: [mlflow]
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    ports:
      - "8880:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
      - ./models:/home/jovyan/models
      - ./training_titanic:/home/jovyan/training_titanic
    networks: [mlops]

  trainer-titanic:
    build:
      context: ./training_titanic
    depends_on: [mlflow]
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AUTO_PROMOTE_TITANIC: ${AUTO_PROMOTE_TITANIC}
      PSI_THRESHOLD: ${PSI_THRESHOLD}
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./training_titanic:/app
    networks: [mlops]

  api:
    build:
      context: ./api
    depends_on: [mlflow]
    restart: unless-stopped
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    command: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "9090:8000"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    networks: [mlops]

  retrainer:
    build:
      context: ./ops
    depends_on: [api, mlflow]
    restart: unless-stopped
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      RETRAIN_CHECK_INTERVAL_SEC: ${RETRAIN_CHECK_INTERVAL_SEC}
      PSI_THRESHOLD: ${PSI_THRESHOLD}
    volumes:
      - ./data:/ops/data
      - ./training_titanic:/ops/training_titanic
    networks: [mlops]

networks:
  mlops:

volumes:
  pgdata:
  minio:
